{
	"info": {
		"_postman_id": "040d3997-bf06-4d2c-944c-10757def7632",
		"name": "Rasa - Server Endpoints",
		"description": "The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "conversations/{conversation id}",
			"item": [
				{
					"name": "tracker",
					"item": [
						{
							"name": "events",
							"item": [
								{
									"name": "Append events to a tracker",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "token",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker",
												"events"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART",
													"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
												},
												{
													"key": "output_channel",
													"value": "slack",
													"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
												},
												{
													"key": "execute_side_effects",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										},
										"description": "Appends one or multiple new events to the tracker state of the conversation. Any existing events will be kept and the new events will be appended, updating the existing state. If events are appended to a new conversation ID, the tracker will be initialised with a new session."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"conversation_id\": \"default\",\n  \"slots\": [\n    {\n      \"slot_name\": \"slot_value\"\n    },\n    {\n      \"slot_name\": \"slot_value\"\n    }\n  ],\n  \"latest_message\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": -45298356,\n        \"end\": 97045942,\n        \"value\": \"ea do et dolore Excepteur\",\n        \"entity\": \"cillum ea reprehenderit\",\n        \"confidence\": 85474709.9877848\n      },\n      {\n        \"start\": -5715756,\n        \"end\": 57620874,\n        \"value\": \"consectetur\",\n        \"entity\": \"quis veniam\",\n        \"confidence\": -76530187.80075195\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"ullamco do cupidatat pariatur est\",\n  \"paused\": false,\n  \"events\": [\n    {\n      \"event\": \"deserunt ad dolor\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"sed enim id in amet\",\n      \"input_channel\": \"sed pariatur\",\n      \"message_id\": \"\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"event\": \"laborum non consequat dolore\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"laborum nostrud\",\n      \"input_channel\": \"aliqua voluptate\",\n      \"message_id\": \"ipsum voluptate laboris\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n    \"action_name\": \"in adipisicing non\",\n    \"action_text\": \"ad dolor non\"\n  },\n  \"active_loop\": {\n    \"name\": \"restaurant_form\"\n  }\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
										},
										{
											"name": "User is not authenticated.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
										},
										{
											"name": "User has insufficient permission.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
										},
										{
											"name": "The request conflicts with the currently loaded model.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
										},
										{
											"name": "An unexpected error occurred.",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"event\": \"slot\",\n  \"timestamp\": -94173785,\n  \"metadata\": {\n    \"arbitrary_metadata_key\": \"some string\",\n    \"more_metadata\": 1\n  },\n  \"text\": \"culpa\",\n  \"input_channel\": \"est proident\",\n  \"message_id\": \"cupidatat\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"intent\": {\n      \"confidence\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    \"intent_ranking\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&output_channel=slack&execute_side_effects=false&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "output_channel",
															"value": "slack"
														},
														{
															"key": "execute_side_effects",
															"value": "false"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
										}
									]
								},
								{
									"name": "Replace a trackers events",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "token",
													"type": "string"
												},
												{
													"key": "value",
													"value": "<API Key>",
													"type": "string"
												},
												{
													"key": "in",
													"value": "query",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker",
												"events"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART",
													"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										},
										"description": "Replaces all events of a tracker with the passed list of events. This endpoint should not be used to modify trackers in a production setup, but rather for creating training data."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"conversation_id\": \"default\",\n  \"slots\": [\n    {\n      \"slot_name\": \"slot_value\"\n    },\n    {\n      \"slot_name\": \"slot_value\"\n    }\n  ],\n  \"latest_message\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": -45298356,\n        \"end\": 97045942,\n        \"value\": \"ea do et dolore Excepteur\",\n        \"entity\": \"cillum ea reprehenderit\",\n        \"confidence\": 85474709.9877848\n      },\n      {\n        \"start\": -5715756,\n        \"end\": 57620874,\n        \"value\": \"consectetur\",\n        \"entity\": \"quis veniam\",\n        \"confidence\": -76530187.80075195\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"ullamco do cupidatat pariatur est\",\n  \"paused\": false,\n  \"events\": [\n    {\n      \"event\": \"deserunt ad dolor\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"sed enim id in amet\",\n      \"input_channel\": \"sed pariatur\",\n      \"message_id\": \"\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"event\": \"laborum non consequat dolore\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"laborum nostrud\",\n      \"input_channel\": \"aliqua voluptate\",\n      \"message_id\": \"ipsum voluptate laboris\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n    \"action_name\": \"in adipisicing non\",\n    \"action_text\": \"ad dolor non\"\n  },\n  \"active_loop\": {\n    \"name\": \"restaurant_form\"\n  }\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
										},
										{
											"name": "User is not authenticated.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
										},
										{
											"name": "User has insufficient permission.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
										},
										{
											"name": "The request conflicts with the currently loaded model.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
										},
										{
											"name": "An unexpected error occurred.",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/conversations/:conversation_id/tracker/events?include_events=AFTER_RESTART&token=<API Key>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"conversations",
														":conversation_id",
														"tracker",
														"events"
													],
													"query": [
														{
															"key": "include_events",
															"value": "AFTER_RESTART"
														},
														{
															"key": "token",
															"value": "<API Key>"
														}
													],
													"variable": [
														{
															"key": "conversation_id",
															"value": "default",
															"description": "(Required) Id of the conversation"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
										}
									]
								}
							]
						},
						{
							"name": "Retrieve a conversations tracker",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"tracker"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART",
											"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
										},
										{
											"key": "until",
											"value": "1559744410",
											"description": "All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included."
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								},
								"description": "The tracker represents the state of the conversation. The state of the tracker is created by applying a sequence of events, which modify the state. These events can optionally be included in the response."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"conversation_id\": \"default\",\n  \"slots\": [\n    {\n      \"slot_name\": \"slot_value\"\n    },\n    {\n      \"slot_name\": \"slot_value\"\n    }\n  ],\n  \"latest_message\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": -27442021,\n        \"end\": 48768985,\n        \"value\": \"in sint esse est\",\n        \"entity\": \"qui nisi in Ut officia\",\n        \"confidence\": -78909466.74501036\n      },\n      {\n        \"start\": 86400418,\n        \"end\": -41650608,\n        \"value\": \"enim occaecat culpa velit\",\n        \"entity\": \"ut ea adipisicing\",\n        \"confidence\": 67102590.83875677\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"nostrud quis elit mollit\",\n  \"paused\": false,\n  \"events\": [\n    {\n      \"event\": \"occaecat veniam dolore\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"ea reprehenderit\",\n      \"input_channel\": \"veniam\",\n      \"message_id\": \"sunt aliqua fugiat ipsum\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"event\": \"proident\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"do consectetur nisi\",\n      \"input_channel\": \"laboris voluptate\",\n      \"message_id\": \"non laboris et irure\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n    \"action_name\": \"ullamco laborum\",\n    \"action_text\": \"aute Duis\"\n  },\n  \"active_loop\": {\n    \"name\": \"restaurant_form\"\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/conversations/:conversation_id/tracker?include_events=AFTER_RESTART&until=1559744410&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"conversations",
												":conversation_id",
												"tracker"
											],
											"query": [
												{
													"key": "include_events",
													"value": "AFTER_RESTART"
												},
												{
													"key": "until",
													"value": "1559744410"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											],
											"variable": [
												{
													"key": "conversation_id",
													"value": "default",
													"description": "(Required) Id of the conversation"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
								}
							]
						}
					]
				},
				{
					"name": "Retrieve an end-to-end story corresponding to a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/yml"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"story"
							],
							"query": [
								{
									"key": "until",
									"value": "1559744410",
									"description": "All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included."
								},
								{
									"key": "all_sessions",
									"value": "false",
									"description": "Whether to fetch all sessions in a conversation, or only the latest session\n* `true` - fetch all conversation sessions.\n* `false` - [default] fetch only the latest conversation session."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "The story represents the whole conversation in end-to-end format. This can be posted to the '/test/stories' endpoint and used as a test."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/yml"
								}
							],
							"cookie": [],
							"body": "- story: story_00055028\n  steps:\n  - user: |\n      hello\n    intent: greet\n  - action: utter_ask_howcanhelp\n  - user: |\n      I'm looking for a [moderately priced]{\"entity\": \"price\", \"value\": \"moderate\"} [Indian]{\"entity\": \"cuisine\"} restaurant for [two]({\"entity\": \"people\"}) people\n    intent: inform\n  - action: utter_on_it\n  - action: utter_ask_location"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/story?until=1559744410&all_sessions=false&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"story"
									],
									"query": [
										{
											"key": "until",
											"value": "1559744410"
										},
										{
											"key": "all_sessions",
											"value": "false"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Run an action in a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"execute"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
								},
								{
									"key": "output_channel",
									"value": "slack",
									"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "DEPRECATED. Runs the action, calling the action server if necessary. Any responses sent by the executed action will be forwarded to the channel specified in the output_channel parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"tracker\": {\n    \"conversation_id\": \"default\",\n    \"slots\": [\n      {\n        \"slot_name\": \"slot_value\"\n      },\n      {\n        \"slot_name\": \"slot_value\"\n      }\n    ],\n    \"latest_message\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"start\": 86670642,\n          \"end\": -15324153,\n          \"value\": \"co\",\n          \"entity\": \"adipisicing ad Excepteur\",\n          \"confidence\": 9659332.925774947\n        },\n        {\n          \"start\": -6785893,\n          \"end\": 83617180,\n          \"value\": \"voluptate\",\n          \"entity\": \"reprehenderit ullamco\",\n          \"confidence\": 15616867.1300783\n        }\n      ],\n      \"intent\": {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      \"intent_ranking\": [\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        },\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        }\n      ]\n    },\n    \"latest_event_time\": 1537645578.314389,\n    \"followup_action\": \"ea aute Excepteur\",\n    \"paused\": false,\n    \"events\": [\n      {\n        \"event\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"text\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"input_channel\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message_id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"parse_data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"event\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"text\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"input_channel\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message_id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"parse_data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"latest_input_channel\": \"rest\",\n    \"latest_action_name\": \"action_listen\",\n    \"latest_action\": {\n      \"action_name\": \"sint culpa dolor tempor par\",\n      \"action_text\": \"mollit\"\n    },\n    \"active_loop\": {\n      \"name\": \"restaurant_form\"\n    }\n  },\n  \"messages\": [\n    {\n      \"recipient_id\": \"minim Duis consectetur id\",\n      \"text\": \"Ut culpa ullamco\",\n      \"image\": \"non ea Ut Lorem\",\n      \"buttons\": [\n        {\n          \"title\": \"quis\",\n          \"payload\": \"commodo et Duis incididunt\"\n        },\n        {\n          \"title\": \"nisi Ut in\",\n          \"payload\": \"ut reprehenderit\"\n        }\n      ],\n      \"attachement\": [\n        {\n          \"title\": \"laborum\",\n          \"payload\": \"voluptate laborum nostrud occaecat\"\n        },\n        {\n          \"title\": \"labore\",\n          \"payload\": \"culpa fugiat amet\"\n        }\n      ]\n    },\n    {\n      \"recipient_id\": \"in est deserunt\",\n      \"text\": \"esse irure eu id\",\n      \"image\": \"consectetur laboris et\",\n      \"buttons\": [\n        {\n          \"title\": \"ullamco eu\",\n          \"payload\": \"est mollit cupidatat id\"\n        },\n        {\n          \"title\": \"eu est\",\n          \"payload\": \"id aute dolore\"\n        }\n      ],\n      \"attachement\": [\n        {\n          \"title\": \"veniam\",\n          \"payload\": \"Ut aute eu id dolor\"\n        },\n        {\n          \"title\": \"ullamco esse in ut\",\n          \"payload\": \"voluptate minim Lorem\"\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"utter_greet\",\n  \"policy\": \"nisi officia id\",\n  \"confidence\": 0.987232\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/execute?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"execute"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Inject an intent into a conversation",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"trigger_intent"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
								},
								{
									"key": "output_channel",
									"value": "slack",
									"description": "The bot's utterances will be forwarded to this channel. It uses the credentials listed in `credentials.yml` to connect. In case the channel does not support this, the utterances will be returned in the response body. Use `latest` to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Sends a specified intent and list of entities in place of a user message. The bot then predicts and executes a response action. Any responses sent by the executed action will be forwarded to the channel specified in the ``output_channel`` parameter. If no output channel is specified, any messages that should be sent to the user will be included in the response of this endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"tracker\": {\n    \"conversation_id\": \"default\",\n    \"slots\": [\n      {\n        \"slot_name\": \"slot_value\"\n      },\n      {\n        \"slot_name\": \"slot_value\"\n      }\n    ],\n    \"latest_message\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"start\": -28421581,\n          \"end\": 21298449,\n          \"value\": \"proident tempor qui dolor\",\n          \"entity\": \"reprehenderit\",\n          \"confidence\": 79402367.99245745\n        },\n        {\n          \"start\": -69110555,\n          \"end\": -68614938,\n          \"value\": \"ipsum et in Duis\",\n          \"entity\": \"esse\",\n          \"confidence\": 35472520.917550296\n        }\n      ],\n      \"intent\": {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      \"intent_ranking\": [\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        },\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        }\n      ]\n    },\n    \"latest_event_time\": 1537645578.314389,\n    \"followup_action\": \"culpa ullamco do aute dolor\",\n    \"paused\": false,\n    \"events\": [\n      {\n        \"event\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"text\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"input_channel\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message_id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"parse_data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"event\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"text\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"input_channel\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"message_id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"parse_data\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"latest_input_channel\": \"rest\",\n    \"latest_action_name\": \"action_listen\",\n    \"latest_action\": {\n      \"action_name\": \"ut laborum fugiat exercitation\",\n      \"action_text\": \"consequat labore esse veniam in\"\n    },\n    \"active_loop\": {\n      \"name\": \"restaurant_form\"\n    }\n  },\n  \"messages\": [\n    {\n      \"recipient_id\": \"eiusmod proident\",\n      \"text\": \"quis ut veniam\",\n      \"image\": \"mollit anim culpa\",\n      \"buttons\": [\n        {\n          \"title\": \"nostrud\",\n          \"payload\": \"occaecat ex voluptate nulla\"\n        },\n        {\n          \"title\": \"cupidatat eu tempor\",\n          \"payload\": \"sit nisi dolor\"\n        }\n      ],\n      \"attachement\": [\n        {\n          \"title\": \"Lorem ad\",\n          \"payload\": \"deserunt sit dolor\"\n        },\n        {\n          \"title\": \"sint\",\n          \"payload\": \"proident magna\"\n        }\n      ]\n    },\n    {\n      \"recipient_id\": \"esse velit\",\n      \"text\": \"quis sed aliquip dolor exercitation\",\n      \"image\": \"dolor\",\n      \"buttons\": [\n        {\n          \"title\": \"cupidatat\",\n          \"payload\": \"magna elit esse\"\n        },\n        {\n          \"title\": \"fugiat aliqua\",\n          \"payload\": \"ex consectetur\"\n        }\n      ],\n      \"attachement\": [\n        {\n          \"title\": \"ullamco qui\",\n          \"payload\": \"amet aliquip officia et fugiat\"\n        },\n        {\n          \"title\": \"quis nostrud\",\n          \"payload\": \"cillum voluptate\"\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"greet\",\n  \"entities\": {\n    \"temperature\": \"high\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/trigger_intent?include_events=AFTER_RESTART&output_channel=slack&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"trigger_intent"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "output_channel",
											"value": "slack"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Predict the next action",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"predict"
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Runs the conversations tracker through the model's policies to predict the scores of all actions present in the model's domain. Actions are returned in the 'scores' array, sorted on their 'score' values. The state of the tracker is not modified."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"scores\": [\n    {\n      \"action\": \"utter_greet\",\n      \"score\": 1\n    },\n    {\n      \"action\": \"utter_greet\",\n      \"score\": 1\n    }\n  ],\n  \"policy\": \"policy_2_TEDPolicy\",\n  \"tracker\": {\n    \"conversation_id\": \"default\",\n    \"slots\": [\n      {\n        \"slot_name\": \"slot_value\"\n      },\n      {\n        \"slot_name\": \"slot_value\"\n      }\n    ],\n    \"latest_message\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"start\": 65198884,\n          \"end\": -60498602,\n          \"value\": \"aute sint aliqua laboris ea\",\n          \"entity\": \"consequat labore dolor\",\n          \"confidence\": -98001749.63427293\n        },\n        {\n          \"start\": 52253840,\n          \"end\": 89140632,\n          \"value\": \"do qui nisi\",\n          \"entity\": \"mollit aliqua\",\n          \"confidence\": -42115938.510871366\n        }\n      ],\n      \"intent\": {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      \"intent_ranking\": [\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        },\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        }\n      ]\n    },\n    \"latest_event_time\": 1537645578.314389,\n    \"followup_action\": \"commodo Ut nulla\",\n    \"paused\": false,\n    \"events\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"latest_input_channel\": \"rest\",\n    \"latest_action_name\": \"action_listen\",\n    \"latest_action\": {\n      \"action_name\": \"amet nisi Excepteur non voluptate\",\n      \"action_text\": \"Excepteur ea ad sunt\"\n    },\n    \"active_loop\": {\n      \"name\": \"restaurant_form\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/predict?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"predict"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Add a message to a tracker",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations",
								":conversation_id",
								"messages"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
								}
							],
							"variable": [
								{
									"key": "conversation_id",
									"value": "default",
									"description": "(Required) Id of the conversation"
								}
							]
						},
						"description": "Adds a message to a tracker. This doesn't trigger the prediction loop. It will log the message on the tracker and return, no actions will be predicted or run. This is often used together with the predict endpoint."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"conversation_id\": \"default\",\n  \"slots\": [\n    {\n      \"slot_name\": \"slot_value\"\n    },\n    {\n      \"slot_name\": \"slot_value\"\n    }\n  ],\n  \"latest_message\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": -45298356,\n        \"end\": 97045942,\n        \"value\": \"ea do et dolore Excepteur\",\n        \"entity\": \"cillum ea reprehenderit\",\n        \"confidence\": 85474709.9877848\n      },\n      {\n        \"start\": -5715756,\n        \"end\": 57620874,\n        \"value\": \"consectetur\",\n        \"entity\": \"quis veniam\",\n        \"confidence\": -76530187.80075195\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  },\n  \"latest_event_time\": 1537645578.314389,\n  \"followup_action\": \"ullamco do cupidatat pariatur est\",\n  \"paused\": false,\n  \"events\": [\n    {\n      \"event\": \"deserunt ad dolor\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"sed enim id in amet\",\n      \"input_channel\": \"sed pariatur\",\n      \"message_id\": \"\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"event\": \"laborum non consequat dolore\",\n      \"timestamp\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"metadata\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"text\": \"laborum nostrud\",\n      \"input_channel\": \"aliqua voluptate\",\n      \"message_id\": \"ipsum voluptate laboris\",\n      \"parse_data\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"latest_input_channel\": \"rest\",\n  \"latest_action_name\": \"action_listen\",\n  \"latest_action\": {\n    \"action_name\": \"in adipisicing non\",\n    \"action_text\": \"ad dolor non\"\n  },\n  \"active_loop\": {\n    \"name\": \"restaurant_form\"\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello!\",\n  \"sender\": \"user\",\n  \"parse_data\": {\n    \"text\": \"Hello!\",\n    \"entities\": [\n      {\n        \"start\": 95644665,\n        \"end\": 75763560,\n        \"value\": \"qui id Ut aliqua dolor\",\n        \"entity\": \"tempor pariatur\",\n        \"confidence\": -30403319.044125438\n      },\n      {\n        \"start\": 16045927,\n        \"end\": 37682356,\n        \"value\": \"amet\",\n        \"entity\": \"quis qui dolor enim in\",\n        \"confidence\": 93334947.0549998\n      }\n    ],\n    \"intent\": {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    \"intent_ranking\": [\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/conversations/:conversation_id/messages?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations",
										":conversation_id",
										"messages"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									],
									"variable": [
										{
											"key": "conversation_id",
											"value": "default",
											"description": "(Required) Id of the conversation"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				}
			]
		},
		{
			"name": "model",
			"item": [
				{
					"name": "test",
					"item": [
						{
							"name": "Evaluate stories",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/yml"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
								},
								"url": {
									"raw": "{{baseUrl}}/model/test/stories?e2e=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"test",
										"stories"
									],
									"query": [
										{
											"key": "e2e",
											"value": "false",
											"description": "Perform an end-to-end evaluation on the posted stories."
										}
									]
								},
								"description": "Evaluates one or multiple stories against the currently loaded Rasa model."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"actions\": [\n    {\n      \"action\": \"utter_ask_howcanhelp\",\n      \"predicted\": \"utter_ask_howcanhelp\",\n      \"policy\": \"policy_0_MemoizationPolicy\",\n      \"confidence\": \"occaecat\"\n    },\n    {\n      \"action\": \"utter_ask_howcanhelp\",\n      \"predicted\": \"utter_ask_howcanhelp\",\n      \"policy\": \"policy_0_MemoizationPolicy\",\n      \"confidence\": \"amet \"\n    }\n  ],\n  \"is_end_to_end_evaluation\": true,\n  \"precision\": 1,\n  \"f1\": 0.9333333333333333,\n  \"accuracy\": 0.9,\n  \"in_training_data_fraction\": 0.8571428571428571,\n  \"report\": {\n    \"conversation_accuracy\": {\n      \"accuracy\": 0.19047619047619047,\n      \"correct\": 18,\n      \"with_warnings\": 1,\n      \"total\": 20\n    },\n    \"in__01\": {\n      \"intent_name\": \"Ut ad\",\n      \"classification_report\": {\n        \"greet\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100,\n          \"confused_with\": {\n            \"chitchat\": 3,\n            \"nlu_fallback\": 5\n          }\n        },\n        \"micro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"macro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"weightedq avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        }\n      }\n    }\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_great\n  - action: utter_happy\n\n- story: sad path 1\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: affirm\n  - action: utter_happy\n\n- story: sad path 2\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: mood_unhappy\n  - action: utter_cheer_up\n  - action: utter_did_that_help\n  - intent: deny\n  - action: utter_goodbye\n\n- story: say goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye"
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/stories?e2e=false&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"stories"
											],
											"query": [
												{
													"key": "e2e",
													"value": "false"
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
								}
							]
						},
						{
							"name": "Perform an intent evaluation",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"test",
										"intents"
									],
									"query": [
										{
											"key": "model",
											"value": "rasa-model.tar.gz",
											"description": "Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation."
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations",
											"description": "If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request."
										},
										{
											"key": "cross_validation_folds",
											"value": ""
										}
									]
								},
								"description": "Evaluates NLU model against a model or using cross-validation."
							},
							"response": [
								{
									"name": "NLU evaluation result",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"intent_evaluation\": {\n    \"report\": {\n      \"greet\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100,\n        \"confused_with\": {\n          \"chitchat\": 3,\n          \"nlu_fallback\": 5\n        }\n      },\n      \"micro avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      },\n      \"macro avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      },\n      \"weightedq avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      }\n    },\n    \"accuracy\": 0.19047619047619047,\n    \"f1_score\": 0.06095238095238095,\n    \"precision\": 0.036281179138321996,\n    \"predictions\": [\n      {\n        \"intent\": \"greet\",\n        \"predicted\": \"greet\",\n        \"text\": \"hey\",\n        \"confidence\": 0.9973567\n      },\n      {\n        \"intent\": \"greet\",\n        \"predicted\": \"greet\",\n        \"text\": \"hey\",\n        \"confidence\": 0.9973567\n      }\n    ],\n    \"errors\": [\n      {\n        \"text\": \"are you alright?\",\n        \"intent_response_key_target\": \"occaecat dolor nulla\",\n        \"intent_response_key_prediction\": {\n          \"confidence\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      {\n        \"text\": \"are you alright?\",\n        \"intent_response_key_target\": \"fugiat in sed cupidatat\",\n        \"intent_response_key_prediction\": {\n          \"confidence\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      }\n    ]\n  },\n  \"response_selection_evaluation\": {\n    \"report\": {\n      \"greet\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100,\n        \"confused_with\": {\n          \"chitchat\": 3,\n          \"nlu_fallback\": 5\n        }\n      },\n      \"micro avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      },\n      \"macro avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      },\n      \"weightedq avg\": {\n        \"precision\": 0.123,\n        \"recall\": 0.456,\n        \"f1-score\": 0.12,\n        \"support\": 100\n      }\n    },\n    \"accuracy\": 0.19047619047619047,\n    \"f1_score\": 0.06095238095238095,\n    \"precision\": 0.036281179138321996,\n    \"predictions\": [\n      {\n        \"intent\": \"greet\",\n        \"predicted\": \"greet\",\n        \"text\": \"hey\",\n        \"confidence\": 0.9973567\n      },\n      {\n        \"intent\": \"greet\",\n        \"predicted\": \"greet\",\n        \"text\": \"hey\",\n        \"confidence\": 0.9973567\n      }\n    ],\n    \"errors\": [\n      {\n        \"text\": \"are you alright?\",\n        \"intent_response_key_target\": \"nulla ex qui\",\n        \"intent_response_key_prediction\": {\n          \"confidence\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      },\n      {\n        \"text\": \"are you alright?\",\n        \"intent_response_key_target\": \"tempor consectetur\",\n        \"intent_response_key_prediction\": {\n          \"confidence\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"name\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      }\n    ]\n  },\n  \"entity_evaluation\": {\n    \"voluptate0a\": {\n      \"report\": {\n        \"greet\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100,\n          \"confused_with\": {\n            \"chitchat\": 3,\n            \"nlu_fallback\": 5\n          }\n        },\n        \"micro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"macro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"weightedq avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        }\n      },\n      \"accuracy\": 0.19047619047619047,\n      \"f1_score\": 0.06095238095238095,\n      \"precision\": 0.036281179138321996,\n      \"predictions\": [\n        {\n          \"intent\": \"greet\",\n          \"predicted\": \"greet\",\n          \"text\": \"hey\",\n          \"confidence\": 0.9973567\n        },\n        {\n          \"intent\": \"greet\",\n          \"predicted\": \"greet\",\n          \"text\": \"hey\",\n          \"confidence\": 0.9973567\n        }\n      ],\n      \"errors\": [\n        {\n          \"text\": \"are you alright?\",\n          \"intent_response_key_target\": \"proident dolor minim non\",\n          \"intent_response_key_prediction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"text\": \"are you alright?\",\n          \"intent_response_key_target\": \"ex aliqua dolore\",\n          \"intent_response_key_prediction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    },\n    \"Lorem_b1\": {\n      \"report\": {\n        \"greet\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100,\n          \"confused_with\": {\n            \"chitchat\": 3,\n            \"nlu_fallback\": 5\n          }\n        },\n        \"micro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"macro avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        },\n        \"weightedq avg\": {\n          \"precision\": 0.123,\n          \"recall\": 0.456,\n          \"f1-score\": 0.12,\n          \"support\": 100\n        }\n      },\n      \"accuracy\": 0.19047619047619047,\n      \"f1_score\": 0.06095238095238095,\n      \"precision\": 0.036281179138321996,\n      \"predictions\": [\n        {\n          \"intent\": \"greet\",\n          \"predicted\": \"greet\",\n          \"text\": \"hey\",\n          \"confidence\": 0.9973567\n        },\n        {\n          \"intent\": \"greet\",\n          \"predicted\": \"greet\",\n          \"text\": \"hey\",\n          \"confidence\": 0.9973567\n        }\n      ],\n      \"errors\": [\n        {\n          \"text\": \"are you alright?\",\n          \"intent_response_key_target\": \"aliquip laboris fugiat eiusmod\",\n          \"intent_response_key_prediction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        },\n        {\n          \"text\": \"are you alright?\",\n          \"intent_response_key_target\": \"in in\",\n          \"intent_response_key_prediction\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        }\n      ]\n    }\n  }\n}"
								},
								{
									"name": "The incoming request specified a `callback_url` and hence the request will return immediately with an empty response. The actual response will be sent to the provided `callback_url` via POST request.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
								},
								{
									"name": "User is not authenticated.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
								},
								{
									"name": "User has insufficient permission.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
								},
								{
									"name": "The request conflicts with the currently loaded model.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
								},
								{
									"name": "An unexpected error occurred.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rasa_nlu_data\": {\n    \"common_examples\": [\n      {\n        \"text\": \"hey\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"dear sir\",\n        \"intent\": \"greet\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place to eat\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": []\n      },\n      {\n        \"text\": \"i'm looking for a place in the north of town\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 36,\n            \"value\": \"north\",\n            \"entity\": \"location\"\n          }\n        ]\n      },\n      {\n        \"text\": \"show me a mexican place in the centre\",\n        \"intent\": \"restaurant_search\",\n        \"entities\": [\n          {\n            \"start\": 31,\n            \"end\": 37,\n            \"value\": \"centre\",\n            \"entity\": \"location\"\n          },\n          {\n            \"start\": 10,\n            \"end\": 17,\n            \"value\": \"mexican\",\n            \"entity\": \"cuisine\"\n          }\n        ]\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/model/test/intents?model=rasa-model.tar.gz&callback_url=https://example.com/rasa_evaluations&cross_validation_folds=&token=<API Key>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"model",
												"test",
												"intents"
											],
											"query": [
												{
													"key": "model",
													"value": "rasa-model.tar.gz"
												},
												{
													"key": "callback_url",
													"value": "https://example.com/rasa_evaluations"
												},
												{
													"key": "cross_validation_folds",
													"value": ""
												},
												{
													"key": "token",
													"value": "<API Key>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
								}
							]
						}
					]
				},
				{
					"name": "Replace the currently loaded model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/model",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model"
							]
						},
						"description": "Updates the currently loaded model. First, tries to load the model from the local (note: local to Rasa server) storage system. Secondly, tries to load the model from the provided model server configuration. Last, tries to load the model from the provided remote storage."
					},
					"response": [
						{
							"name": "Model was successfully replaced.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"model_file\": \"/absolute-path-to-models-directory/models/20190512.tar.gz\",\n  \"model_server\": {\n    \"url\": \"mollit aliquip sint qui\",\n    \"params\": {},\n    \"headers\": {},\n    \"basic_auth\": {},\n    \"token\": \"sunt ad commodo\",\n    \"token_name\": \"proident deserunt minim voluptate non\",\n    \"wait_time_between_pulls\": 15890867\n  },\n  \"remote_storage\": \"aws\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Unload the trained model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/model",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model"
							]
						},
						"description": "Unloads the currently loaded trained model from the server."
					},
					"response": [
						{
							"name": "Model was sucessfully unloaded.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/model?token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model"
									],
									"query": [
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						}
					]
				},
				{
					"name": "Train a Rasa model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/yaml"
							},
							{
								"key": "Accept",
								"value": "application/octet-stream"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
						},
						"url": {
							"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"train"
							],
							"query": [
								{
									"key": "save_to_default_model_directory",
									"value": "true"
								},
								{
									"key": "force_training",
									"value": "false"
								},
								{
									"key": "augmentation",
									"value": "50"
								},
								{
									"key": "num_threads",
									"value": "1"
								},
								{
									"key": "callback_url",
									"value": "https://example.com/rasa_evaluations",
									"description": "If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request."
								}
							]
						},
						"description": "Trains a new Rasa model. Depending on the data given only a dialogue model, only a NLU model, or a model combining a trained dialogue model with an NLU model will be trained. The new model is not loaded by default."
					},
					"response": [
						{
							"name": "Zipped Rasa model",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "filename",
									"value": "eu ad",
									"description": "File name of the trained model."
								},
								{
									"key": "Content-Type",
									"value": "application/octet-stream"
								}
							],
							"cookie": [],
							"body": "eu ad"
						},
						{
							"name": "The incoming request specified a `callback_url` and hence the request will return immediately with an empty response. The actual response will be sent to the provided `callback_url` via POST request.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pipeline: []\n\npolicies: []\n\nintents:\n  - greet\n  - goodbye\n\nentities: []\nslots: {}\nactions: []\nforms: {}\ne2e_actions: []\n\nresponses:\n  utter_greet:\n  - text: \"Hey! How are you?\"\n\n  utter_goodbye:\n  - text: \"Bye\"\n\nsession_config:\n  session_expiration_time: 60\n  carry_over_slots_to_new_session: true\n\nnlu:\n- intent: greet\n  examples: |\n    - hey\n    - hello\n\n- intent: goodbye\n  examples: |\n    - bye\n    - goodbye\n\nrules:\n\n- rule: Say goodbye anytime the user says goodbye\n  steps:\n  - intent: goodbye\n  - action: utter_goodbye\n\nstories:\n\n- story: happy path\n  steps:\n  - intent: greet\n  - action: utter_greet\n  - intent: goodbye\n  - action: utter_goodbye\n"
								},
								"url": {
									"raw": "{{baseUrl}}/model/train?save_to_default_model_directory=true&force_training=false&augmentation=50&num_threads=1&callback_url=https://example.com/rasa_evaluations&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"train"
									],
									"query": [
										{
											"key": "save_to_default_model_directory",
											"value": "true"
										},
										{
											"key": "force_training",
											"value": "false"
										},
										{
											"key": "augmentation",
											"value": "50"
										},
										{
											"key": "num_threads",
											"value": "1"
										},
										{
											"key": "callback_url",
											"value": "https://example.com/rasa_evaluations"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Predict an action on a temporary state",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"predict"
							],
							"query": [
								{
									"key": "include_events",
									"value": "AFTER_RESTART",
									"description": "Specify which events of the tracker the response should contain.\n* `ALL` - every logged event.\n* `APPLIED` - only events that contribute to the trackers state. This excludes reverted utterances and actions that got undone.\n* `AFTER_RESTART` -  all events since the last `restarted` event.\n  This includes utterances that got reverted and actions that got undone.\n\n* `NONE` - no events."
								}
							]
						},
						"description": "Predicts the next action on the tracker state as it is posted to this endpoint. Rasa will create a temporary tracker from the provided events and will use it to predict an action. No messages will be sent and no action will be run."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"scores\": [\n    {\n      \"action\": \"utter_greet\",\n      \"score\": 1\n    },\n    {\n      \"action\": \"utter_greet\",\n      \"score\": 1\n    }\n  ],\n  \"policy\": \"policy_2_TEDPolicy\",\n  \"tracker\": {\n    \"conversation_id\": \"default\",\n    \"slots\": [\n      {\n        \"slot_name\": \"slot_value\"\n      },\n      {\n        \"slot_name\": \"slot_value\"\n      }\n    ],\n    \"latest_message\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"start\": 4335907,\n          \"end\": -70240916,\n          \"value\": \"occaecat\",\n          \"entity\": \"ex labore\",\n          \"confidence\": 36104599.4838641\n        },\n        {\n          \"start\": -93363562,\n          \"end\": 26127337,\n          \"value\": \"consequat aliquip laboris eu\",\n          \"entity\": \"mollit\",\n          \"confidence\": 86734005.43506214\n        }\n      ],\n      \"intent\": {\n        \"confidence\": 0.6323,\n        \"name\": \"greet\"\n      },\n      \"intent_ranking\": [\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        },\n        {\n          \"confidence\": 0.6323,\n          \"name\": \"greet\"\n        }\n      ]\n    },\n    \"latest_event_time\": 1537645578.314389,\n    \"followup_action\": \"irure aliquip\",\n    \"paused\": false,\n    \"events\": [\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    ],\n    \"latest_input_channel\": \"rest\",\n    \"latest_action_name\": \"action_listen\",\n    \"latest_action\": {\n      \"action_name\": \"nulla labo\",\n      \"action_text\": \"consectetur commod\"\n    },\n    \"active_loop\": {\n      \"name\": \"restaurant_form\"\n    }\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "The request conflicts with the currently loaded model.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"event\": \"slot\",\n    \"timestamp\": 71026918,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"ut qui fugiat\",\n    \"input_channel\": \"in ipsum sunt\",\n    \"message_id\": \"velit nisi\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  {\n    \"event\": \"slot\",\n    \"timestamp\": -61216166,\n    \"metadata\": {\n      \"arbitrary_metadata_key\": \"some string\",\n      \"more_metadata\": 1\n    },\n    \"text\": \"officia Duis\",\n    \"input_channel\": \"velit\",\n    \"message_id\": \"incididunt minim dolor dolore\",\n    \"parse_data\": {\n      \"text\": \"Hello!\",\n      \"entities\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"intent\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"intent_ranking\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/predict?include_events=AFTER_RESTART&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"predict"
									],
									"query": [
										{
											"key": "include_events",
											"value": "AFTER_RESTART"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				},
				{
					"name": "Parse a message using the Rasa model",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"model",
								"parse"
							],
							"query": [
								{
									"key": "emulation_mode",
									"value": "LUIS",
									"description": "Specify the emulation mode to use. Emulation mode transforms the response JSON to the format expected by the service specified as the emulation_mode. Requests must still be sent in the regular Rasa format."
								}
							]
						},
						"description": "Predicts the intent and entities of the message posted to this endpoint. No messages will be stored to a conversation and no action will be run. This will just retrieve the NLU parse results."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"text\": \"Hello!\",\n  \"entities\": [\n    {\n      \"start\": 54321662,\n      \"end\": 52205188,\n      \"value\": \"est\",\n      \"entity\": \"Duis esse ut\",\n      \"confidence\": 44642856.53117743\n    },\n    {\n      \"start\": 77522774,\n      \"end\": 63400767,\n      \"value\": \"ex nulla fugiat\",\n      \"entity\": \"sint cupidatat\",\n      \"confidence\": 9083825.578133807\n    }\n  ],\n  \"intent\": {\n    \"confidence\": 0.6323,\n    \"name\": \"greet\"\n  },\n  \"intent_ranking\": [\n    {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    },\n    {\n      \"confidence\": 0.6323,\n      \"name\": \"greet\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"BadRequest\",\n  \"code\": 400\n}"
						},
						{
							"name": "User is not authenticated.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
						},
						{
							"name": "User has insufficient permission.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
						},
						{
							"name": "An unexpected error occurred.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Hello, I am Rasa!\",\n  \"message_id\": \"b2831e73-1407-4ba0-a861-0f30a42a2a5a\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/model/parse?emulation_mode=LUIS&token=<API Key>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"model",
										"parse"
									],
									"query": [
										{
											"key": "emulation_mode",
											"value": "LUIS"
										},
										{
											"key": "token",
											"value": "<API Key>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
						}
					]
				}
			]
		},
		{
			"name": "Health endpoint of Rasa Server",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "This URL can be used as an endpoint to run health checks against. When the server is running this will return 200."
			},
			"response": [
				{
					"name": "Up and running",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": "Hello from Rasa: 1.0.0"
				}
			]
		},
		{
			"name": "Version of Rasa",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/version",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Returns the version of Rasa."
			},
			"response": [
				{
					"name": "Version of Rasa",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"minimum_compatible_version\": \"1.0.0\"\n}"
				}
			]
		},
		{
			"name": "Status of the Rasa server",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "value",
							"value": "<API Key>",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				},
				"description": "Information about the server and the currently loaded Rasa model."
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"model_id\": \"75a985b7b86d442ca013d61ea4781b22\",\n  \"model_file\": \"20190429-103105.tar.gz\",\n  \"num_active_training_jobs\": 2\n}"
				},
				{
					"name": "User is not authenticated.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
				},
				{
					"name": "User has insufficient permission.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
				},
				{
					"name": "The request conflicts with the currently loaded model.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"Conflict\",\n  \"message\": \"The request conflicts with the currently loaded model.\",\n  \"code\": 409\n}"
				}
			]
		},
		{
			"name": "Retrieve the loaded domain",
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "token",
							"type": "string"
						},
						{
							"key": "value",
							"value": "<API Key>",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/domain",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"domain"
					]
				},
				"description": "Returns the domain specification the currently loaded model is using."
			},
			"response": [
				{
					"name": "Domain was successfully retrieved.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"config\": {\n    \"store_entities_as_slots\": false\n  },\n  \"intents\": [\n    {\n      \"aliquaf\": {\n        \"use_entities\": false\n      }\n    },\n    {\n      \"voluptate5\": {\n        \"use_entities\": true\n      },\n      \"sed_6d2\": {\n        \"use_entities\": true\n      },\n      \"Lorem_21\": {\n        \"use_entities\": true\n      }\n    }\n  ],\n  \"entities\": [\n    \"person\",\n    \"location\"\n  ],\n  \"slots\": {\n    \"quis4\": {\n      \"type\": \"nisi tempor\",\n      \"auto_fill\": true,\n      \"initial_value\": \"in exercitation Ut\",\n      \"values\": [\n        \"voluptate dolor e\",\n        \"veniam in velit ea\"\n      ]\n    }\n  },\n  \"responses\": {\n    \"ullamco_7\": {\n      \"text\": \"tempor sunt anim qui aliqua\"\n    },\n    \"sed_0_6\": {\n      \"text\": \"eu aliqua\"\n    }\n  },\n  \"actions\": [\n    \"action_greet\",\n    \"action_goodbye\",\n    \"action_listen\"\n  ]\n}"
				},
				{
					"name": "User is not authenticated.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthenticated\",\n  \"message\": \"User is not authenticated to access resource.\",\n  \"code\": 401\n}"
				},
				{
					"name": "User has insufficient permission.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"NotAuthorized\",\n  \"message\": \"User has insufficient permission to access resource.\",\n  \"code\": 403\n}"
				},
				{
					"name": "Invalid header provided.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Not Acceptable",
					"code": 406,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"failure\",\n  \"reason\": \"InvalidHeader\",\n  \"message\": \"Invalid header was provided with the request.\",\n  \"code\": 406\n}"
				},
				{
					"name": "An unexpected error occurred.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/domain?token=<API Key>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"domain"
							],
							"query": [
								{
									"key": "token",
									"value": "<API Key>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"version\": \"1.0.0\",\n  \"status\": \"ServerError\",\n  \"message\": \"An unexpected error occurred.\",\n  \"code\": 500\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5005",
			"type": "string"
		}
	]
}